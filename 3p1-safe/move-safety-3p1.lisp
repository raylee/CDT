(load "../utilities.lisp")

;; tl-4-simplex (type=1,2,3,4 (p0 p1 p2 p3 p4))
;; tl-3-simplex (type=1,2,3 (p0 p1 p2 p3))
;; sl-3-simplex (p0 p1 p2 p3)
;; tl-2-simplex (type=1,2 (p0 p1 p2))
;; sl-2-simplex (p0 p1 p2)
;; tl-1-simplex (type=1 (p0 p1))
;; sl-1-simplex (tp0 p1)

(defparameter *OLDTL3SXS* nil)
(defparameter *OLDSL3SXS* nil)
(defparameter *OLDTL2SXS* nil)
(defparameter *OLDSL2SXS* nil)
(defparameter *OLDTL1SXS* nil)
(defparameter *OLDSL1SXS* nil)
(defparameter *NEWTL3SXS* nil)
(defparameter *NEWSL3SXS* nil)
(defparameter *NEWTL2SXS* nil)
(defparameter *NEWSL2SXS* nil)
(defparameter *NEWTL1SXS* nil)
(defparameter *NEWSL1SXS* nil)


(defun reset-lists ()
  (setf *OLDTL3SXS* nil)
  (setf *OLDSL3SXS* nil)
  (setf *OLDTL2SXS* nil)
  (setf *OLDSL2SXS* nil)
  (setf *OLDTL1SXS* nil)
  (setf *OLDSL1SXS* nil)
  (setf *NEWTL3SXS* nil)
  (setf *NEWSL3SXS* nil)
  (setf *NEWTL2SXS* nil)
  (setf *NEWSL2SXS* nil)
  (setf *NEWTL1SXS* nil)
  (setf *NEWSL1SXS* nil))

;; equality of two timelike simplices 
(defun tl-sx-equal? (tlsx1 tlsx2)
  (set-equal? (second tlsx1) (second tlsx2)))

;; 4sx=(type (p0 p1 p2 p3 p4))
(defun generate-old-3sxlist (4sx)
  (let ((type (first 4sx))
	(p0 (first (second 4sx)))
	(p1 (second (second 4sx)))
	(p2 (third (second 4sx)))
	(p3 (fourth (second 4sx)))
	(p4 (fifth (second 4sx))))
    (cond ((= 1 type)
	   (pushnew `(1 (,p0 ,p1 ,p2 ,p3)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p1 ,p2 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p1 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2 ,p3 ,p4) *OLDSL3SXS* :test #'set-equal?))
	  ((= 2 type)
	   (pushnew `(2 (,p0 ,p1 ,p2 ,p3)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p2 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p2 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?))
	  ((= 3 type)
	   (pushnew `(3 (,p0 ,p1 ,p2 ,p3)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(3 (,p0 ,p1 ,p2 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p2 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p1 ,p2 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?))
	  ((= 4 type)
	   (pushnew `(,p0 ,p1 ,p2 ,p3) *OLDSL3SXS* :test #'set-equal?)
	   (pushnew `(3 (,p0 ,p1 ,p2 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(3 (,p0 ,p1 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(3 (,p0 ,p2 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(3 (,p1 ,p2 ,p3 ,p4)) *OLDTL3SXS* :test #'tl-sx-equal?)))))

(defun generate-new-3sxlist (4sx)
  (let ((type (first 4sx))
	(p0 (first (second 4sx)))
	(p1 (second (second 4sx)))
	(p2 (third (second 4sx)))
	(p3 (fourth (second 4sx)))
	(p4 (fifth (second 4sx))))
    (cond ((= 1 type)
	   (pushnew `(1 (,p0 ,p1 ,p2 ,p3)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p1 ,p2 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p1 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2 ,p3 ,p4) *NEWSL3SXS* :test #'set-equal?))
	  ((= 2 type)
	   (pushnew `(2 (,p0 ,p1 ,p2 ,p3)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p2 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p2 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?))
	  ((= 3 type)
	   (pushnew `(3 (,p0 ,p1 ,p2 ,p3)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(3 (,p0 ,p1 ,p2 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p2 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p1 ,p2 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?))
	  ((= 4 type)
	   (pushnew `(,p0 ,p1 ,p2 ,p3) *NEWSL3SXS* :test #'set-equal?)
	   (pushnew `(3 (,p0 ,p1 ,p2 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(3 (,p0 ,p1 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(3 (,p0 ,p2 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)
	   (pushnew `(3 (,p1 ,p2 ,p3 ,p4)) *NEWTL3SXS* :test #'tl-sx-equal?)))))

(defun generate-old-2sxlist (4sx)
    (let ((type (first 4sx))
	(p0 (first (second 4sx)))
	(p1 (second (second 4sx)))
	(p2 (third (second 4sx)))
	(p3 (fourth (second 4sx)))
	(p4 (fifth (second 4sx))))
    (cond ((= 1 type)
	   (pushnew `(1 (,p0 ,p1 ,p2)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p1 ,p3)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p1 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p3)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2 ,p3) *OLDSL2SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p2 ,p4) *OLDSL2SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p3 ,p4) *OLDSL2SXS* :test #'set-equal?)
	   (pushnew `(,p2 ,p3 ,p4) *OLDSL2SXS* :test #'set-equal?))
	  ((= 2 type)
	   (pushnew `(2 (,p0 ,p1 ,p2)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p3)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p3)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p2 ,p3)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p2 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p3 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p2 ,p3 ,p4) *OLDSL2SXS* :test #'set-equal?))
	  ((= 3 type)
	   (pushnew `(,p0 ,p1 ,p2) *OLDSL2SXS* :test #'set-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p3)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p2 ,p3)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p2 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p1 ,p2 ,p3)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p1 ,p2 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p3 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p2 ,p3 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?))
	  ((= 4 type)
	   (pushnew `(,p0 ,p1 ,p2) *OLDSL2SXS* :test #'set-equal?)
	   (pushnew `(,p0 ,p1 ,p3) *OLDSL2SXS* :test #'set-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p0 ,p2 ,p3) *OLDSL2SXS* :test #'set-equal?)
	   (pushnew `(2 (,p0 ,p2 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p3 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2 ,p3) *OLDSL2SXS* :test #'set-equal?)
	   (pushnew `(2 (,p1 ,p2 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p1 ,p3 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p2 ,p3 ,p4)) *OLDTL2SXS* :test #'tl-sx-equal?)))))

(defun generate-new-2sxlist (4sx)
    (let ((type (first 4sx))
	(p0 (first (second 4sx)))
	(p1 (second (second 4sx)))
	(p2 (third (second 4sx)))
	(p3 (fourth (second 4sx)))
	(p4 (fifth (second 4sx))))
    (cond ((= 1 type)
	   (pushnew `(1 (,p0 ,p1 ,p2)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p1 ,p3)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p1 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p3)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2 ,p3) *NEWSL2SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p2 ,p4) *NEWSL2SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p3 ,p4) *NEWSL2SXS* :test #'set-equal?)
	   (pushnew `(,p2 ,p3 ,p4) *NEWSL2SXS* :test #'set-equal?))
	  ((= 2 type)
	   (pushnew `(2 (,p0 ,p1 ,p2)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p3)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p3)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p2 ,p3)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p2 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p3 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p2 ,p3 ,p4) *NEWSL2SXS* :test #'set-equal?))
	  ((= 3 type)
	   (pushnew `(,p0 ,p1 ,p2) *NEWSL2SXS* :test #'set-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p3)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p2 ,p3)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p2 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p1 ,p2 ,p3)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p1 ,p2 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p3 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p2 ,p3 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?))
	  ((= 4 type)
	   (pushnew `(,p0 ,p1 ,p2) *NEWSL2SXS* :test #'set-equal?)
	   (pushnew `(,p0 ,p1 ,p3) *NEWSL2SXS* :test #'set-equal?)
	   (pushnew `(2 (,p0 ,p1 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p0 ,p2 ,p3) *NEWSL2SXS* :test #'set-equal?)
	   (pushnew `(2 (,p0 ,p2 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p0 ,p3 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2 ,p3) *NEWSL2SXS* :test #'set-equal?)
	   (pushnew `(2 (,p1 ,p2 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p1 ,p3 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)
	   (pushnew `(2 (,p2 ,p3 ,p4)) *NEWTL2SXS* :test #'tl-sx-equal?)))))

(defun generate-old-1sxlist (4sx)
  (let ((type (first 4sx))
	(p0 (first (second 4sx)))
	(p1 (second (second 4sx)))
	(p2 (third (second 4sx)))
	(p3 (fourth (second 4sx)))
	(p4 (fifth (second 4sx))))
    (cond ((= 1 type)
	   (pushnew `(1 (,p0 ,p1)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p3) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p4) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p2 ,p3) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p2 ,p4) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p3 ,p4) *OLDSL1SXS* :test #'set-equal?))
	  ((= 2 type)
	   (pushnew `(,p0 ,p1) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p0 ,p2)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p2)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p3)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p2 ,p3) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p2 ,p4) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p3 ,p4) *OLDSL1SXS* :test #'set-equal?))
	  ((= 3 type)
	   (pushnew `(,p0 ,p1) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p0 ,p2) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p0 ,p3)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p1 ,p3)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p2 ,p3)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p2 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p3 ,p4) *OLDSL1SXS* :test #'set-equal?))
	  ((= 4 type)
	   (pushnew `(,p0 ,p1) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p0 ,p2) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p0 ,p3) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p0 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p3) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p1 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p2 ,p3) *OLDSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p2 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p3 ,p4)) *OLDTL1SXS* :test #'tl-sx-equal?)))))

(defun generate-new-1sxlist (4sx)
  (let ((type (first 4sx))
	(p0 (first (second 4sx)))
	(p1 (second (second 4sx)))
	(p2 (third (second 4sx)))
	(p3 (fourth (second 4sx)))
	(p4 (fifth (second 4sx))))
    (cond ((= 1 type)
	   (pushnew `(1 (,p0 ,p1)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p2)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p3) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p4) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p2 ,p3) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p2 ,p4) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p3 ,p4) *NEWSL1SXS* :test #'set-equal?))
	  ((= 2 type)
	   (pushnew `(,p0 ,p1) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p0 ,p2)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p3)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p2)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p3)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p2 ,p3) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p2 ,p4) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p3 ,p4) *NEWSL1SXS* :test #'set-equal?))
	  ((= 3 type)
	   (pushnew `(,p0 ,p1) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p0 ,p2) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p0 ,p3)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p0 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p1 ,p3)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p1 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p2 ,p3)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p2 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p3 ,p4) *NEWSL1SXS* :test #'set-equal?))
	  ((= 4 type)
	   (pushnew `(,p0 ,p1) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p0 ,p2) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p0 ,p3) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p0 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p1 ,p2) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(,p1 ,p3) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p1 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(,p2 ,p3) *NEWSL1SXS* :test #'set-equal?)
	   (pushnew `(1 (,p2 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)
	   (pushnew `(1 (,p3 ,p4)) *NEWTL1SXS* :test #'tl-sx-equal?)))))

(defun move-safety-3p1 (old4sxs new4sxs)
  (dolist (old4sx old4sxs)
    (generate-old-3sxlist old4sx)
    (generate-old-2sxlist old4sx)
    (generate-old-1sxlist old4sx))
  (dolist (new4sx new4sxs)
    (generate-new-3sxlist new4sx)
    (generate-new-2sxlist new4sx)
    (generate-new-1sxlist new4sx))

  (format t "Old TL 3-simplices not present in New ~A~%"
	  (set-difference *OLDTL3SXS* *NEWTL3SXS* :test #'tl-sx-equal?))
  (format t "Old SL 3-simplices not present in New ~A~%"
	  (set-difference *OLDSL3SXS* *NEWSL3SXS* :test #'set-equal?))
  (format t "Old TL 2-simplices not present in New ~A~%"
	  (set-difference *OLDTL2SXS* *NEWTL2SXS* :test #'tl-sx-equal?))
  (format t "Old SL 2-simplices not present in New ~A~%"
	  (set-difference *OLDSL2SXS* *NEWSL2SXS* :test #'set-equal?))
  (format t "Old TL 1-simplices not present in New ~A~%"
	  (set-difference *OLDTL1SXS* *NEWTL1SXS* :test #'tl-sx-equal?))
  (format t "Old SL 1-simplices not present in New ~A~%"
	  (set-difference *OLDSL1SXS* *NEWSL1SXS* :test #'set-equal?))

  (format t "New TL 3-simplices are ~A~%" 
	  (set-difference *NEWTL3SXS* *OLDTL3SXS* :test #'tl-sx-equal?))
  (format t "New SL 3-simplices are ~A~%" 
	  (set-difference *NEWSL3SXS* *OLDSL3SXS* :test #'set-equal?))
  (format t "New TL 2-simplices are ~A~%" 
	  (set-difference *NEWTL2SXS* *OLDTL2SXS* :test #'tl-sx-equal?))
  (format t "New SL 2-simplices are ~A~%" 
	  (set-difference *NEWSL2SXS* *OLDSL2SXS* :test #'set-equal?))
  (format t "New TL 1-simplices are ~A~%" 
	  (set-difference *NEWTL1SXS* *OLDTL1SXS* :test #'tl-sx-equal?))
  (format t "New SL 1-simplices are ~A~%" 
	  (set-difference *NEWSL1SXS* *OLDSL1SXS* :test #'set-equal?)))
