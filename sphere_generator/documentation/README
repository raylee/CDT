sphere_generator/documentation/users_guide.txt

Time-stamp: <2012-09-28 13:48:21 (jonah)>

Author: Jonah Miller (jonah.maxwell.miller@gmail.com)

This is the user's guide for sphere_generator, a program that
generates geometries homeomorphic to a 2-sphere out of equilateral
triangles. Currently you can select for surface area (i.e., the number
of equilateral triangles) and for the standard deviation of
volume. The output is a list of triangles defined by their vertices
(which are numbered). The geometry can be completely reconstructed
from this intrinsic coordinate system.

Call sphere_generator from the command line with:

python sphere_generator.py args

args can be a number of things. To run a simulation with all defaults
and a target surface are of sa, use:

python sphere_generator.py sa

You can also control surface area with the flag "--target-area". For
example, to set the surface area to 20, use:

python sphere_generator.py --target-area 20

In general, you control the simulation by calling it through the
command line with various flags. The value you want to set by calling
the flag comes after the flag. For instance, to set the surface area to 20
and the target standard deviation to 6:

python sphere_generator.py --target-std 6 --target-area 20

or

python sphere_generator.py 20 --target-std 6

Surface area is the only command line argument you can use without a
flag. If you use it without a flag, it must be the first argument.

The flags available are:

--target-area  (sets the surface area of the sphere. No default.
                You MUST set this value.)
                
--target-std   (sets the target standard deviation of curvature.
                Defaults to 0.)
                
--area-damping (a number between 0 and 1. How hard the simulation tries to
                stay at the target surface area. Defaults to 0.8.)
                
--std-damping  (a number between 0 and 1. How hard the simulation tries to
                stay at the target standard deviation of curvature.
                Defaults to 0.8.)
                
--initial      (Integer. The initial sweep number. Really only makes sense
                for continuing simulations. Defaults to 0.)
                
--final        (Integer. The final sweep number you want to go to.
                If --initial is set to 0, this is the total number of
                sweeps performed by the simulation. Defaults to 0.)
                
--save         (Integer. How often you save. If --save is set to 5,
                you save after every 5 sweeps. Defaults to 1.)
                
--many         (You don't need a value after this flag. It sets the
                simulation to save to a new file every time it saves
                the sphere. This is not the default behaviour.)
                
--one          (You don't need a value after this flag. It sets the
                simulation to save to a single file every time it saves.
                The simulation also writes to a progress file so that if
                it crashes, you can resume with no trouble.)
                
--file         (File is a special flag. The value after it should be a
                filename ending in either ".boundary2p1" or "boundaryprg2p1".
                The simulation will load a sphere from that file. If the
                file is of type ".boundary2p1", it contains a list of
                triangles, each defined by 3 vertex numbers. This is all
                information needed to a load a sphere from file. All other
                command line flags still need to be called if you want to
                use them. If the file is of type ".boundaryprg2p1", the
                program will load the sphere file corresponding to that
                file name AND the parameters saved in the progress file.
                Other command line arguments don't do anything at all
                in this case.)

As alluded to in the tags, a sphere_generator.py call will produce one
of two types of outputs. If the --one flag is used, the program will
save to two files. One, ending in ".boundary2p1", will contain exactly
the format required to feed to CDT/2p1-fixed-boundaries. It is of the form

((v1 v2 v3) (v1 v3 v4) ... )

where v1,v2,v3,v4,... are vertex numbers. Each space-separated list of
3 vertices is a triangle (i.e., a space-like 2-simplex). The other
file ends in ".boundaryprg2p1". It is of the following format

target-area area-damping target-std std-damping save-every-n-sweeps
current-sweep/final-sweep

The file name format will be

S2_TA0<target-area>_STD0<std>_f0<final-sweep>_<start-date-and-time>.suffix

If the --many flag is ued, the program will save a new sphere file
every time it saves to file, so there's no need for a progress
file. In this case, the file names are of the following form:

S2_TA0<target-area>_STD0<std>_io<current-sweep>_f0<final-sweep>_<start-date-and-time>.boundary2p1

You can find some examples (with the .example suffix) in the folder
"output." By default, the files are saved to the pwd (which should
just be the sphere_generator folder), but you could change this
behavior by poking around in the code a little.
