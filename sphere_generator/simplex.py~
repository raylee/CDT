#!/usr/bin/env python

"""
simplex.py 

Author: Jonah Miller (jonah.miller@colorado.edu) 

This file is part of the sphere_generator program which generates
spheres of (as close as possible to) uniform curvature for a given
surface area by monte carlo simulation.

Data structures and classes are contained in this file. We need a
class to contain information about triangle vertices, triangle edges,
and triangles. Each one class instance will be stored in a dictionary
with a value to access it given by an ID number, which we cycle
through and recycle. There is a shared "static" attribute for each
class to keep track of this.
"""



# Dependencies
#-------------------------------------------------------------------------
import numpy as np
import scipy as sp
#-------------------------------------------------------------------------



# Global Constants Relating to Classes. On the top for convenience only.
#-------------------------------------------------------------------------
edge_length = 1 # For triangles. Triangles are equilateral.

# area = (1/2) * base * height
# base = a
# height^2 = hypotenuse^2 - (base/2)^2 = sqrt(3)(edge_length)/2
triangle_area = np.sqrt(3) * edge_length**2 / 4
# Triangle Dihedral Angle. For calculating curvature.
triangle_angle = np.pi/3 
#-------------------------------------------------------------------------



# Classes
#-------------------------------------------------------------------------
# The points class
class vertex:
    """A class for keeping track of points.
    
    Attributes: 
    -- last_used_id = the last used point ID. global/static. 
                      Shared by all class instances
    -- recycled_ids = A list of used IDs, which, after deletion, become 
                      available. Global/static. Shared by all class instances.
    -- triangles    = A list of triangles that contain this vertex. Used to 
                      calculate curvature. Defined by the init function
    -- curvature() = a function that calculates the local curvature
                     of the manifold at a vertex.
    -- edges() = A function that calculates the edges that contain the
                 vertex. Uses triangle properties. (NOT YET IMPLIMENTED)

    Functions that act on the class:
    -- increment_id(class_name) = A function that increments last_used_id
    -- reclaim_id(class_name,id) = Takes the id and adds it to recycled_ids 
                                 list.
    -- recycle_id(class_name) = A function that returns the least element of 
                               recycled_ids and deletes it from the list.
    -- make_id(class_name) = A function that generates a new id for a vertex.
                            First looks in recycled IDs. If there are non
                            available, uses increment ID.

    To initialize: v = vertex()
    """               
    
    # Static/global variables
    last_used_id = 0  # Last used point ID.
    recycled_ids = [] # List of unused point IDS <= last_used_id
    
    # Initialization function
    def __init__(self):
        "Initialize a vertex. "
        # Local triangle list
        self.triangles = []
    
    # Other functions
    def curvature(self):
        """Curvature is directly proportional to the deficit angle
        2*pi - area_of_triangle * sum(triangles attached to vertex)."""
        return 2 * (2 * np.pi - triangle_angle * len(self.triangles))

# The edge class
class edge:
    """A class for keeping track of triangle edges
    
    Attributes: 
    -- last_used_id = the last used point ID. global/static. 
                      Shared by all class instances
    -- recycled_ids = A list of used IDs, which, after deletion, become 
                      available. Global/static. Shared by all class instances.
    -- triangles    = A list of triangles that contain this edge. 

    Functions that act on the class:
    -- increment_id(class_name) = A function that increments last_used_id
    -- reclaim_id(class_name,id) = Takes the id and adds it to recycled_ids 
                                 list.
    -- recycle_id(class_name) = A function that returns the least element of 
                               recycled_ids and deletes it from the list.
    -- make_id(class_name) = A function that generates a new id for a vertex.
                            First looks in recycled IDs. If there are non
                            available, uses increment ID.
    -- points = a function that returns the points the edge contains
    
    Example of call: e = edge()
    where triangle_list = [triangle1,triangle2]
    """

    # Static/global variables
    last_used_id = 0 # Last used edge ID.
    recycled_ids = [] # List of unused edge IDS <= last_used_id

    # Initialization function
    def __init__(self):
        "Initialize an edge"
        # Local triangle list
        self.triangles = []


# The triangle class
class triangle:
    """A class for keeping track of triangle edges
    
    Attributes: 
    -- last_used_id = the last used point ID. global/static. 
                      Shared by all class instances
    -- recycled_ids = A list of used IDs, which, after deletion, become 
                      available. Global/static. Shared by all class instances.
    -- points       = A list of points contained by the triangle

    Functions that act on the class:
    -- increment_id(class_name) = A function that increments last_used_id
    -- reclaim_id(class_name,id) = Takes the id and adds it to recycled_ids 
                                 list.
    -- recycle_id(class_name) = A function that returns the least element of 
                               recycled_ids and deletes it from the list.
    -- make_id(class_name) = A function that generates a new id for a vertex.
                            First looks in recycled IDs. If there are non
                            available, uses increment ID.
    -- edges() = A list of edges contained by the triangle

    
    Example of call: t = triangle(point_list)
    where point_list = [p1,p2,p3]
    """

    # Static/global variables
    last_used_id = 0 # Last used triangle ID.
    recycled_ids = [] # List of unused vertex IDS <= last_used_id

    # Initialization function
    def __init__(self):
        "Initialize a triangle"
        self.points = []
#-------------------------------------------------------------------------



### Functions that act on all classes
###-------------------------------------------------------------------------
# A map from strings to class names. Used for all functions in this section.
object_map = {'vertex':vertex,
              'edge':edge,
              'triangle':triangle}

def increment_id(class_name):
    """Increment the staticvariable last_used_id for a class by 1. 
    Then return the new id for use."""
    # Accesses the class by using a string.
    object_map[class_name].last_used_id += 1
    return object_map[class_name].last_used_id

# Take an unused ID name and add it to the list of recycled IDs.
def reclaim_id(class_name,object_id):
    """"Take an input class ID and add it to the list of recycled IDs for
    that class."""
    object_map[class_name].recycled_ids.append(object_id)
    # Not strictly necessary to have a return value, but why not?
    return object_map[class_name].recycled_ids 

# Take an element of recycled ids for a given class, pop it out, and
# return it.
def recycle_id(class_name):
    """Looks for the minimum element of your recycled IDs of a given object, 
    returns it, and removes it from the list."""
    # Find the minimum element
    minval = min(object_map[class_name].recycled_ids)  
    # Remove the minimum element from the list.
    object_map[class_name].recycled_ids.remove(minval) 
    return minval # Return the returned element for reuse.

# Generate an ID name (new or recycled, depending on availability)
# for use.
def make_id(class_name):
    """Generate an ID name for use with the given class. First looks in 
    recycled ids. If none are available, makes a brand new ID."""
    if len(object_map[class_name].recycled_ids) > 0:
        new_id = recycle_id(class_name)
    else:
        new_id = increment_id(class_name)
    return new_id
###-------------------------------------------------------------------------
