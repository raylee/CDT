#!/usr/bin/env python2

# average_ensemble.py
# Author: Jonah Miller (jonah.maxwell.miller@gmail.com)
# Date: August 8, 2012

# This program loads a spacetime ensemble from a file, looks at
# 2-volume as a function of proper time, produces an average, and fits
# to a function

# Modules
#-------------------------------------------------------------------------
import numpy as np # For array control
import scipy as sp
import matplotlib as mpl # For data visualization
import matplotlib.pyplot as plt
import scipy.optimize as opt

# Written by me for spacetime data
import visualize_spacetime as vs
#-------------------------------------------------------------------------



# Constants
#-------------------------------------------------------------------------
def de_sitter_form(x,s,C):
    """
    The functional form for de Sitter Space. x is position, s and C
    are all fit parameters. N3 is the total number of 3-simplices in
    the spacetime. num_slices is the number of time slices in the spacetime.
    """
    # A normalized cosine. used for clarity.
    n_cos = lambda y: np.cos(y/(s * N3**(1/3.)))
    
    # The full width/half-max of the spacetime
    fwhm = np.arccos(np.sqrt((np.pi * A/2.)*(s * N3**(1/3.)/N3)))

    # for -s * N3**(1/3.) * fwhm <= (x - C) <= s * N3**(1/3.) * fwhm
    bulk = lambda x: (2/np.pi) * (N3/(s * N3**(1/3.))) * n_cos(x-C)**2

    return bulk(x)        
#-------------------------------------------------------------------------



# Main Method Functions
#-------------------------------------------------------------------------
def extract_2_volume_ensemble(filename_list):
    """
    Reads in each *.3sx2p1 file in filename_list and produces a list
    of lists of 2-volume information as a function of proper time.

    Returns a vector. The first element contains header data, which is
    assumed to be the same for all elements of the ensemble.
    """
    # Do the first spacetime seperately to extract header data
    first_spacetime = vs.read_3simplices_from_data_file(filename_list[0])
    header_data = first_spacetime[0]
    spacetimes = [first_spacetime[1]]

    # Extract the remaining spacetimes
    for f in filename_list[1:]:
        spacetimes.append(vs.read_3simplices_from_data_file(f)[1])

    # Extract the 2-simplex information 
    sl2simplices = [vs.get_all_sl2simplices([header_data,s]) \
                        for s in spacetimes]

    # Run garbage collection
    del spacetimes

    # Extract volumes as a function of time
    volumes = [vs.make_v_of_t(s) for s in sl2simplices]

    # Delete the old lists
    del sl2simplices

    return [header_data,volumes]


def statistical_average(volumes):
    """
    Takes an ensemble of 2-volume(proper time) and averages it,
    producing mean and standard deviation at each point. Returns a vector:
    [means, standard_deviations]
    """
    volumes = np.array(volumes).transpose()
    means = []
    stds = []
    for v_list in volumes:
        means.append(np.mean(v_list))
        stds.append(np.std(v_list))

    return [means,stds]


def fit_to_data(mean_volume_data,N3):
    """
    Takes mean volume data and attempts to fit to de Sitter
    spacetime. time_slices is the number of time slices, and N3 is the
    3-volume of the system.
    """

    # Total number of slices
    num_slices = len(mean_volume_data)


    # Define the x-axis (time slices)
    xdata = range(num_slices)

    # Fit!
    return opt.curve_fit(de_sitter_form,np.array(xdata),np.array(mean_volume_data))


