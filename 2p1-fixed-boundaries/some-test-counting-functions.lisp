(defun list-keys-with-trait (trait hashtable key-subindex)
  (let ((keylist nil))
    (flet ((discriminator (hkey hval)
	     (when (funcall trait (nth key-subindex hkey))
	       (push hkey keylist))))
      (maphash #'discriminator hashtable)
      keylist)))

(defun count-keys-with-trait (trait hashtable key-subindex)
  (let ((count 0))
    (flet ((discriminator (hkey hval)
	     (when (funcall trait (nth key-subindex hkey))
	       (incf count 1))))
      (maphash #'discriminator hashtable)
      count)))

(defun contains-an-identical-pair (input-list)
  (dolist (i input-list)
    (let ((templist (set-difference input-list (cons i nil))))
      (when (< (length templist) (1- (length input-list)))
	(return i)))))

(defun list-vals-with-trait (trait hashtable val-subindex)
  (let ((vallist nil))
    (flet ((discriminator (hkey hval)
	     (when (funcall trait (nth val-subindex hval))
	       (push hval vallist))))
      (maphash #'discriminator hashtable)
      vallist)))

(defun count-vals-with-trait (trait hashtable val-subindex)
  (let ((count 0))
    (flet ((discriminator (hkey hval)
	     (when (funcall trait (nth val-subindex hval))
	       (incf count 1))))
      (maphash #'discriminator hashtable)
      count)))
