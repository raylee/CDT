;; move_tracking.lisp
;; Author: Jonah Miller (jonah.maxwell.miller@gmail.com)
;; Date: August 3, 2012

;; This program is a module meant to be used with the 2+1-dimensional
;; CDT simulations to track how many moves of a given type may be
;; attempted at each time slice.

;; Requires the following modules to be loaded first:

;; ../utilities.lisp
;; globals.lisp
;; generalized-hash-table-counting-functions.lisp
;; simplex.lisp
;; moves.lisp

;; If you want to plot what you get, you also need
;; ascii_plotting_tools.lisp



;;;; Functions
;;;;-------------------------------------------------------------------------

(defmacro make-ratio (list1 list2)
  "Returns a list: (list1_1/list2_1,list1_2/list2_2,...)."
  `(mapcar #'/ ,list1 ,list2))

(defmacro make-percent (list1 list2)
  "Each element in list1 is (make-percant list1 list2)% of each
   element in list2. Returns a list."
  `(flet ((percent (x) (* 100 (float x))))
    (mapcar #'percent (make-ratio ,list1 ,list2))))

(defun map-move-in-sandwich (move-function t0)
  "Find out how many simplices with t-low t0 (i.e., in the t0,t0+1 sandwich)
   are topologically acceptable for a given move."
  (let* ((attempts 0)
	 (simplices (get-simplices-in-sandwich t0 (1+ t0)))
	 (num-simplices 0)) ; not necessary, but faster than (length)
    (loop for simplex in simplices do
	 (incf num-simplices)
	 (when (funcall move-function simplex)
	   (incf attempts)))
    (values attempts num-simplices)))

(defun percent-moves-in-sandwich (move-function t0)
  "Find out what percentage of simplices in the t0,t0+1 sandwich are
   topologically acceptable targets for a given move."
  (* 100 (float (/ (map-move-in-sandwich move-function t0)
		   (count-simplices-in-sandwich t0 (1+ t0))))))

(defun map-move-volume-accross-time (move-function)
  "For each time slice sandwich, checks to see on how many 3-simplices
   a move is topologically acceptable. Returns a pair of lists. The
   first is the total number of topologically acceptable simplices for
   each time slice. The second is the total number of 3-simplices at
   that time slice. The index is time."
  (let* ((attempt-count nil) ; The number of simplices which are
			     ; topologically acceptable for a move
	 (simplex-count nil) ; The total number of simplices at a
			     ; given time slice.
	 ; The number of time slices we iterate over. 
	 ; Open boundaries have one extra slice.
	 (t-max (if (string= BCTYPE "OPEN") (1- NUM-T) (- NUM-T 2))))
    (loop for i from 0 to t-max do
	 (push (map-move-in-sandwich move-function i) attempt-count)
	 (push (count-simplices-in-sandwich i (1+ i)) simplex-count))
    (values (reverse attempt-count) (reverse simplex-count))))

;;;;-------------------------------------------------------------------------
