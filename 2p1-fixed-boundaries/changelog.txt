---------------------------------------------------------------------------
UPDATING 2p1 CODE TO WORK WITH FIXED BOUNDARY CONDITIONS
---------------------------------------------------------------------------

ORIGINAL 2p1 CDT CODE BY:
Rajesh Kommu

PREVIOUS 2p1-fixed-boundary CODE BY:
David Kamensky

UPDATED CODE BY:
Jonah Miller


---------------------------------------------------------------------------
THE APPROACH
---------------------------------------------------------------------------
David Kamensky's code included a bug from outdated code written by
Rajesh that Rajesh has since fixed with the addition of several data
structures that work on lower-level simplex information. I decided
that the best way to make modern 2+1 dimensional code that works with
fixed boundary conditions would be to port David's methods to Rajesh's
new code. Fortunately, since Rajesh's changes mostly affect the
lower-level function calls, top-level function calls behave exactly the
same. This means I can port quite a lot of David's code word for word. 

I also need to fix some slightly incorrect physics in David's
code. David had the boundary term of the action incorrectly calculated
(some very minor errors). These have been fixed.

UPDATE: David's code is fully updated and bug fixed.

---------------------------------------------------------------------------
CHANGES
---------------------------------------------------------------------------
June 24th, 2012 -- Bug-fixed David's code so that it runs. Fixed action.
     	   	   Did not add necessary data structures for full update. 
		   This was just a test.

June 25th, 2012 -- Renamed David's program 2p1-fixed-boundaries-old
     	   	-- Created a copy of Rajesh's 2p1 code as 
		   2p1-fixed-boundaries and replaced Rajesh's 
		   initialization.lisp with David's.
		

June 26th, 2012 -- Ported correct action with boundary-condition terms to 
		   2p1-fixed-boundaries code.
		-- Ported b-vector from David's old code to new
		   2p1-fixed-boundaries.

TODO ------------  Moves are not yet rejected if they attempt to change
     		   boundary. I need to figure out how this works. New action
		   is not yet read out in metropolis algorithm.

June 27th, 2012 -- Updated David's simplex counting functions to take
     	   	   advantage of Rajesh's new simplex data structures.
		   These are required for David's initialization.lisp
		   file to work.

TODO ------------- Make sure David's initialization.lisp makes calls
     		   to functions that all exist. This is nontrivial.

PROGRESS REPORT -- So far, I have gone through globals.lisp and 
	 	   simplex.lisp and ensured compatibility. I need
		   to also go through moves.lisp, initialization.lisp, 
		   and montecarlo.lisp.

June 28th, 2012 -- Went through moves.lisp, and made sure try-n->m 
     	   	   functions output the change in the boundary terms
		   (the b-vector).
		-- Went through initialization.lisp. Most of David's 
		   code should work word for word.
		-- Updated montecarlo.lisp to use the corrected action, 
		   which has new terms in it for the boundary.
		-- Ensured that all function calls called functions that
		   exist.
		-- Added the functions: 
		   -- list-keys-with-trait
		   -- count-keys-with-trait
		   -- contains-an-identical-pair
		   -- list-vals-with-trait
		   -- count-vals-with-trait

June 29th, 2012 -- Discovered an error in David's initialization.lisp. 
     	   	   set-last-used-point for moves to behave correctly. 
		   David's code is missing this command. This error 
		   has been fixed.

July 5th, 2012 --- Discovered that the the boundary term should actually
     	       	   keep track of the boundaries separately and with opposite 
		   sign. Implimented this.
	       --- Discovered an error in the in-upper-sandwich and 
	           in-lower-sandwich macros. Misplaced parentheses causing
		   them
		   to always return true. Fixed this error.

July 9th, 2012 --- Significantly reworked the action in action-exposed
     	       	   in globals.lisp. Fixed a small error in action
     	       	   formulation, but mostly the goal was improved clarity.

July 12th, 2012 -- Discovered an error in initialization.lisp. The initialial
     	   	   counts for n-dimensional simplices were all off for
		   initial geometries other than the initial triangulation.
		   They were calculated using an extremely naive 
		   (NUMBER OF POINTS PER SLICE) * (NUMBER OF TIME SLICES)
		   formula which only works when the number of points per
		   slice is constant. This has been updated and a number 
		   of counting functions were added to simplex.lisp to
		   make things more readable.

July 13th, 2012 -- I reformatted all files so that each line 
     	   	   is only 80 characters wide. This is more legible for me.
		-- I discovered that my version of David's code is 
		   incapable of generating any spacetime except spacetimes 
		   with tetrahedra as boundary conditions. David changed the
		   make-3simplex function to update point counts as simplices
		   are made. I missed this change during my grand update, and 
		   it sat quietly hiding until yesterday when I discovered
		   errors after trying to initialize non-tetrahedra.
		   The problem has been solved now. make-3simplex-v3 now keeps
		   track of point count.
		-- Discovered that there is likely something wrong with my 
		   action. Needs more thought.

July 17th, 2012 -- I discovered an error in my analytical action. A sign 
     	   	   is off in the volume terms (multiplied by little lambda). 
		   Fixed.

July 25th, 2012 -- I discovered an error in David's initialization
     	   	   algorithm. David's algorithm replaces the initial
     	   	   and final time slices created by a minimal
     	   	   initialization. However, David's algorithm failed
     	   	   to remove lower-dimensional subsimplices from the
     	   	   time slices he replaced. This means
     	   	   lower-dimensional objects were overcounted. The
     	   	   final geoemetry also may have had some problems
     	   	   with connection to earlier time-slices. All fixed.
