#!/usr/bin/env python2

"""
make_post_thermalization_script_dewitt.py
Author: Jonah Miller (jonah.maxwell.miller@gmail.com)
Time-stamp: <2013-07-10 15:18:55 (jonah)>

This program takes any number of input spacetimes (*.3sx2p1 files) and
generates a post-themralization script for each one based on the
parameters set in the script.

Example call:
----------------------------------------------------------------------
python2 make_post_thermalization_script_dewitt.py $(pwd)/my_data/*.3sx2p1

"""

# Import modules
# ----------------------------------------------------------------------
import sys, os # For the operating system/file system commands
from math import ceil # The ceiling function. We want this.

# ----------------------------------------------------------------------

# USER-DEFINED CONSTANTS
# ----------------------------------------------------------------------

# You should set these before using the script.

NUM_CORES=1 # The number of cores we can run the simulation on.
SAVE_EVERY_N_SWEEPS=500 # How often we save a spacetime
ENSEMBLE_SIZE = 1000 # The number of spacetimes we want total.

# ----------------------------------------------------------------------

# Non user-defined constants
# ----------------------------------------------------------------------

# Don't change these.

# The total number of sweeps we need to build an ensemble of the size we want.
TOTAL_SWEEPS = ENSEMBLE_SIZE * SAVE_EVERY_N_SWEEPS
# The number of sweeps run per core.
SWEEPS_PER_CORE = ceil(TOTAL_SWEEPS/float(NUM_CORES))

# The script to print with some of the variables inserted.
LISPSCRIPT="""
;;; AUTO.{filename}.post_thermalization.script.lisp

;;;; auto-generated post-thermalization script.

;;;; Author: Jonah Miller (jonah.maxwell.miller@gmail.com)

;;;; Loads a thermalized spacetime file and runs it to help build an
;;;; ensemble. Autogenerated using
;;;; make_post_thermalization_script_dewitt.py

(load "cdt2p1") ; load the (2+1)-dimensional CDT program.

; how different each element of the ensemble should be
(setf SAVE-EVERY-N-SWEEPS {save_every_n_sweeps}) 

; The number of sweeps this simulation will run.
(setf NUM-SWEEPS {num_sweeps})

; Open the file
(with-open-fule (f {filename}) (load-spacetime-from-file f))

(generate-data-v2)
"""

# ----------------------------------------------------------------------

# Function definitions
# ----------------------------------------------------------------------
def make_lisp_script(input_file):
    return LISPSCRIPT.format(filename=input_file,
                              save_every_n_sweeps = SAVE_EVERY_N_SWEEPS,
                              num_sweeps = SWEEPS_PER_CORE)

def make_outfile_name(input_file):
    return "AUTO.{}.post_thermalization.script.lisp".format(input_file)

def make_output(input_file):
    outfile_name = make_outfile_name(input_file)
    out_script = make_lisp_script(input_file)
    print outfile_name
    with open(outfile_name,'w') as f:
        f.write(out_script)

def main():
    print "Making scripts!"
    print "Script names are:"
    for i in sys.argv[1:]:
        # this if statement parses long filenames. Only works in *nix.
        if "/" in i: 
            i = i.split("/")[-1]
        make_output(i)
    print "All done! Happy hacking!"

# ----------------------------------------------------------------------

# Main loop
# ----------------------------------------------------------------------
if __name__ == "__main__":
    main()

# ----------------------------------------------------------------------
